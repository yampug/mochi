Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $assign_ivar_val = Opal.assign_ivar_val, $def = Opal.def, $rb_plus = Opal.rb_plus, $assign_ivar = Opal.assign_ivar, $return_ivar = Opal.return_ivar, $rb_minus = Opal.rb_minus, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('+,puts,-');
  
  (function($base, $super) {
    var self = $klass($base, $super, 'PlusFive');

    var $proto = self.$$prototype;
    if (self.pfcount == null) self.pfcount = nil;

    $proto.pfcount = nil;
    
    self.cmp_name = "plus-five";
    self.pfcount;
    
    $def(self, '$initialize', $assign_ivar_val("pfcount", 0));
    
    $def(self, '$reactables', function $$reactables() {
      
      return ["pfcount"]
    });
    
    $def(self, '$html', function $$html() {
      
      return "\n" + "      <div class=\"plus-five\">\n" + "        <button on:click={increment}>Increment</button>\n" + "        <div>pfcount: {pfcount}</div>\n" + "      </div>\n" + "    "
    });
    
    $def(self, '$css', function $$css() {
      
      return "\n" + "      .plus-five {\n" + "        background: yellow;\n" + "      }\n" + "    "
    });
    
    $def(self, '$increment', function $$increment() {
      var self = this;

      return (self.pfcount = $rb_plus(self.pfcount, 1))
    });
    
    $def(self, '$mounted', function $$mounted() {
      var self = this;

      return self.$puts("PlusFive mounted")
    });
    
    $def(self, '$unmounted', function $$unmounted() {
      var self = this;

      return self.$puts("PlusFive unmounted")
    });
    
    $def(self, '$set_pfcount', $assign_ivar("pfcount"));
    return $def(self, '$get_pfcount', $return_ivar("pfcount"));
  })($nesting[0], null);
  return (function($base, $super) {
    var self = $klass($base, $super, 'Counter');

    var $proto = self.$$prototype;
    if (self.count == null) self.count = nil;
    if (self.modifications == null) self.modifications = nil;

    $proto.count = $proto.modifications = nil;
    
    self.cmp_name = "my-counter";
    self.count;
    self.modifications;
    
    $def(self, '$initialize', function $$initialize() {
      var self = this;

      
      self.count = 0;
      return (self.modifications = 0);
    });
    
    $def(self, '$reactables', function $$reactables() {
      
      return ["count", "modifications"]
    });
    
    $def(self, '$html', function $$html() {
      
      return "\n" + "      <div class=\"wrapper\">\n" + "        <h1>Count123: {count}</h1>\n" + "        <h2>Modifications: {modifications}</h2>\n" + "        <button on:click={increment}>Increment</button>\n" + "        <button on:click={decrement}>Decrement</button>\n" + "        <plus-five bind:pfcount=\"{count}\"></plus-five>\n" + "        <input value={count} on:change={input_changed} type=\"text\"></input>\n" + "      </div>\n" + "    "
    });
    
    $def(self, '$css', function $$css() {
      
      return "\n" + "      .wrapper {\n" + "        background: red;\n" + "        width: 200px;\n" + "        padding: 10px;\n" + "        margin-bottom: 5px;\n" + "        border-radius: 14px;\n" + "      }\n" + "      .plus-five {\n" + "        background: green;\n" + "\n" + "      }\n" + "    "
    });
    
    $def(self, '$input_changed', function $$input_changed(e, value) {
      var self = this;

      
      self.$puts("input changed: " + (e) + ": " + (value));
      return (self.count = $rb_plus(self.count, value));
    });
    
    $def(self, '$increment', function $$increment() {
      var self = this;

      
      self.count = $rb_plus(self.count, 1);
      return (self.modifications = $rb_plus(self.modifications, 1));
    });
    
    $def(self, '$decrement', function $$decrement() {
      var self = this;

      
      self.count = $rb_minus(self.count, 1);
      return (self.modifications = $rb_plus(self.modifications, 1));
    });
    
    $def(self, '$mounted', function $$mounted() {
      var self = this;

      return self.$puts("Counter mounted")
    });
    
    $def(self, '$unmounted', function $$unmounted() {
      var self = this;

      return self.$puts("Counter unmounted")
    });
    
    $def(self, '$set_count', $assign_ivar("count"));
    
    $def(self, '$get_count', $return_ivar("count"));
    
    $def(self, '$set_modifications', $assign_ivar("modifications"));
    return $def(self, '$get_modifications', $return_ivar("modifications"));
  })($nesting[0], null);
});

Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $Kernel = Opal.Kernel, nil = Opal.nil;

  Opal.add_stubs('exit');
  return $Kernel.$exit()
});


          let reactablesArrPlusFiveWebComp = ["pfcount"];

          class PlusFiveWebComp extends HTMLElement {

              constructor() {
                  super();
                  this.rubyComp = Opal.PlusFive.$new();
                  this.paintCount = 0;
              }

              connectedCallback() {
                  this.rubyComp.$mounted();
                  this.shadow = this.attachShadow({ mode: "open" });
                  this.render();
              }

              syncAttributes() {
                  // sync attributes (method call may have altered them)
                  for (let i = 0; i < reactablesArrPlusFiveWebComp.length; i++) {
                      this.setAttribute(reactablesArrPlusFiveWebComp[i], this.rubyComp["$get_" + reactablesArrPlusFiveWebComp[i]]());
                  }
              }

              render() {
                  // TODO check if vars actually changed
                  let html = `
                      <div class="plus-five">
 <button on:click="{increment}">Increment</button>
 <div>pfcount: {pfcount}</div>
</div>
                  `;

                  for (let i = 0; i < reactablesArrPlusFiveWebComp.length; i++) {
                     // console.log(reactablesArrPlusFiveWebComp[i]);
                     html = html.replaceAll("{" + reactablesArrPlusFiveWebComp[i] + "}", this.rubyComp["$get_" + reactablesArrPlusFiveWebComp[i]]());
                  }

                  if (this.shadow) {
                      this.shadow.innerHTML = html;

                      const style = document.createElement("style");
                      style.textContent = `
                          .plus-five {
  background: yellow;
 }
                      `;
                      this.shadow.appendChild(style);
                      if (this.paintCount === 0) {
                          // listen to click events
                          this.shadow.addEventListener('click', (event) => {
                            const clickedElement = event.target;
                            const actionTarget = clickedElement.closest('[on\\:click]');
                            if (actionTarget) {
                              let actionValue = actionTarget.getAttribute('on:click');
                              // remove curly braces
                              let trimmedActionVal = actionValue.substring(1, actionValue.length - 1);

                              // basically call the method Opal.compInstance.new.method()
                              this.rubyComp["$"+trimmedActionVal]()
                              this.syncAttributes();
                              this.render();
                            }
                          });

                          // listen to change events
                          let matches = this.shadow.querySelectorAll("input[on\\:change]")
                          if (matches) {
                              for (let i = 0; i < matches.length; i++) {
                                  matches[i].addEventListener("change", (event) => {

                                       let actionValue = event.target.getAttribute('on:change');
                                      // remove curly braces
                                      let trimmedActionVal = actionValue.substring(1, actionValue.length - 1);
                                      let value = event.target.value;
                                      // auto-convert value to number if numeric
                                        const primValue = Number(value);
                                        if (Number.isFinite(primValue)) {
                                          this.rubyComp["$"+trimmedActionVal](event, primValue);
                                        } else {
                                          this.rubyComp["$"+trimmedActionVal](event, value);
                                        }


                                     this.syncAttributes();
                                      this.render();
                                  });
                              }
                          }
                      }

                      
                      this.paintCount = this.paintCount + 1;
                  }
              }

              disconnectedCallback() {
                  this.rubyComp.$unmounted();
              }

              static get observedAttributes() {
                  return ["pfcount"];
              }

              attributeChangedCallback(name, oldValue, newValue) {
                  console.log("Attribute " + name + " has changed from " + oldValue + " to " + newValue + "");
                  // TODO react to attributes changing
                  if (oldValue === newValue) {
                      return;
                  }
                  try {
                      let currentValue = this.rubyComp["$get_" + name]();
                      if (typeof currentValue === "number") {
                          // assign as number
                          this.rubyComp["$set_" + name](Number(newValue));
                      } else {
                          // assign as string
                          this.rubyComp["$set_" + name](newValue);
                      }
                      this.render();
                  } catch (e) {
                      console.error("Component render failed", e);
                  }
              }
          }
         customElements.define("plus-five", PlusFiveWebComp);

            let reactablesArrCounterWebComp = ["count", "modifications"];

            class CounterWebComp extends HTMLElement {

                constructor() {
                    super();
                    this.rubyComp = Opal.Counter.$new();
                    this.paintCount = 0;
                }

                connectedCallback() {
                    this.rubyComp.$mounted();
                    this.shadow = this.attachShadow({ mode: "open" });
                    this.render();
                }

                syncAttributes() {
                    // sync attributes (method call may have altered them)
                    for (let i = 0; i < reactablesArrCounterWebComp.length; i++) {
                        this.setAttribute(reactablesArrCounterWebComp[i], this.rubyComp["$get_" + reactablesArrCounterWebComp[i]]());
                    }
                }

                render() {
                    // TODO check if vars actually changed
                    let html = `
                        <div class="wrapper">
   <h1>Count123: {count}</h1>
   <h2>Modifications: {modifications}</h2>
   <button on:click="{increment}">Increment</button>
   <button on:click="{decrement}">Decrement</button>
   <plus-five pfcount="{count}"></plus-five><input value="{count}" on:change="{input_changed}" type="text">
  </div>
                    `;

                    for (let i = 0; i < reactablesArrCounterWebComp.length; i++) {
                       // console.log(reactablesArrCounterWebComp[i]);
                       html = html.replaceAll("{" + reactablesArrCounterWebComp[i] + "}", this.rubyComp["$get_" + reactablesArrCounterWebComp[i]]());
                    }

                    if (this.shadow) {
                        this.shadow.innerHTML = html;

                        const style = document.createElement("style");
                        style.textContent = `
                            .wrapper {
    background: red;
    width: 200px;
    padding: 10px;
    margin-bottom: 5px;
    border-radius: 14px;
   }
   .plus-five {
    background: green;

   }
                        `;
                        this.shadow.appendChild(style);
                        if (this.paintCount === 0) {
                            // listen to click events
                            this.shadow.addEventListener('click', (event) => {
                              const clickedElement = event.target;
                              const actionTarget = clickedElement.closest('[on\\:click]');
                              if (actionTarget) {
                                let actionValue = actionTarget.getAttribute('on:click');
                                // remove curly braces
                                let trimmedActionVal = actionValue.substring(1, actionValue.length - 1);

                                // basically call the method Opal.compInstance.new.method()
                                this.rubyComp["$"+trimmedActionVal]()
                                this.syncAttributes();
                                this.render();
                              }
                            });

                            // listen to change events
                            let matches = this.shadow.querySelectorAll("input[on\\:change]")
                            if (matches) {
                                for (let i = 0; i < matches.length; i++) {
                                    matches[i].addEventListener("change", (event) => {

                                         let actionValue = event.target.getAttribute('on:change');
                                        // remove curly braces
                                        let trimmedActionVal = actionValue.substring(1, actionValue.length - 1);
                                        let value = event.target.value;
                                        // auto-convert value to number if numeric
                                          const primValue = Number(value);
                                          if (Number.isFinite(primValue)) {
                                            this.rubyComp["$"+trimmedActionVal](event, primValue);
                                          } else {
                                            this.rubyComp["$"+trimmedActionVal](event, value);
                                          }


                                       this.syncAttributes();
                                        this.render();
                                    });
                                }
                            }
                        }

                        let bindElements = this.shadow.querySelectorAll("[pfcount]")
if (bindElements) {
for (let i = 0; i < bindElements.length; i++) {
                const observer = new MutationObserver((mutationsList, observer) => {
        for (const mutation of mutationsList) {
          if (mutation.type === 'attributes') {
            let newValue = mutation.target.getAttribute(mutation.attributeName);
          //console.log(mutation.target.getAttribute(mutation.attributeName));
//                    const currentValue = parseInt(trackedElement.getAttribute('pfcount'), 10);

            //console.log("Attribute '"+mutation.attributeName+" was modified.");
            // Add your logic for other attribute changes on this element
            this.attributeChangedCallback("count", null, newValue)
          }
        }
      });
      observer.observe(bindElements[i], {
        attributes: true,
        childList: false,
        subtree: false, // if you want to listen to changes within children of the element with pfcount
        characterData: false,
        attributeOldValue: false // if you need the old value of an attribute
      });
}
}

                        this.paintCount = this.paintCount + 1;
                    }
                }

                disconnectedCallback() {
                    this.rubyComp.$unmounted();
                }

                static get observedAttributes() {
                    return ["count", "modifications"];
                }

                attributeChangedCallback(name, oldValue, newValue) {
                    console.log("Attribute " + name + " has changed from " + oldValue + " to " + newValue + "");
                    // TODO react to attributes changing
                    if (oldValue === newValue) {
                        return;
                    }
                    try {
                        let currentValue = this.rubyComp["$get_" + name]();
                        if (typeof currentValue === "number") {
                            // assign as number
                            this.rubyComp["$set_" + name](Number(newValue));
                        } else {
                            // assign as string
                            this.rubyComp["$set_" + name](newValue);
                        }
                        this.render();
                    } catch (e) {
                        console.error("Component render failed", e);
                    }
                }
            }
           customElements.define("my-counter", CounterWebComp);

